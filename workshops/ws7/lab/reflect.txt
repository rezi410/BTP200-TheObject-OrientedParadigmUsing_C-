//   Student Name:       Reziyemu Sulaiman
//   Seneca Student ID:  106-153-208
//   Seneca email:       rsulaiman2@myseneca.ca
//   Date of completion: 2021-03-27

// I have done all the coding by myself and only copied the code (logic)
// that my professor provided to complete my workshops and assignments.


In this workshop, I learned how to implement base class and derived class, how to inherit a derived class from the base class, and access shadowed member functions defined in the base class from the derived class. I also learned how to implement logic to deal with the client's input within the workshop. 
When I get started working on the workshop for the first time, I identified the relationship between Truck and MotorVehicle as “child and mother”. This visualization helped a lot to connect the inheritance between Truck and MotorVehicle. I realized that inheritance is about identifying which is a child and which is a mother, and what attributes that child can inherit from (his/her) mother, and which are not inherited. Specifically, it is about to create attributes in child class that could not inherit from the mother class and make different or same behaviour for mother class and child class, and access the shadowed behaviour defined in mother class from the child class. 
While doing this workshop, the most difficult part for me to deal with is about making a reasonable logic for the function addCargo in the child class called “Truck”. I created so much logic for it to make it work but still could not figure out how to make my logic work and deal with varieties of user input. There are total three times of user inputs with different cargo loads. Each time, my logic was worked for 2 of them and did not work for the last one (which is user input load already exceeds the capacity). However, my professor helped me to simplify my logic to work for all of their times of user input. This logic goes like this: To load cargo that does not exceed the Truck capacity, first of all, I have to check if the coming user input load is less than the capacity of the Truck. If it is, then check again if the coming load added to the stored load in the Truck (which will be the total load) did not exceed the capacity of the Truck. If that is the case, then I can add the stored load to the coming load (which will be the total cargo load). Otherwise, add some of them. By making such simplest and reasonable logic, it can deal with varieties of client input situations (much better than my old logic which was more complex and not flexible ^.^). 
All in all, it is a good practice for me to work on child class within parent class. I think there is nothing special about the derived class and base class as long as I could differentiate the base class and derived class, and inherit necessary attributes or behaviours from the base class. I believe that this workshop is close to C++ gaming, and I’m looking forward to learning the coming lessons about how to use incapsulation, inheritance, and polymorphism all together in C++.

